name: build-and-publish

on:
  push:
    branches: [main] # Trigger the workflow when changes are pushed to the 'main' branch
    paths:
      - 'packages/**' # Only trigger if something changes inside packages/
      - '.github/workflows/publish.yml' # Or if this workflow file itself changes

jobs:
  publish:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository using GitHub's token
      - name: Checkout repo
        uses: actions/checkout@v4

      # Step 2: Setup Node.js version 20
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Write .npmrc with GitHub Packages auth
      - name: Write .npmrc
        run: echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 4: Install dependencies for all workspaces using npm
      - name: Install dependencies
        run: npm ci --workspaces

      # Step 5: Build each workspace (assumes each has a build script)
      - name: Build packages
        run: npm run build --workspaces

      # Step 6: Debug authentication (optional, but useful for troubleshooting)
      - name: Debug auth
        run: npm whoami || echo "Not authenticated"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_USERCONFIG: ${{ github.workspace }}/.npmrc

      # Step 7: Publish any changed workspaces
      - name: Publish changed workspaces
        id: publish
        run: |
          set -e
          CHANGED=0
          WORKSPACES=$(find packages -mindepth 1 -maxdepth 1 -type d -exec test -f '{}/package.json' \; -print | sed 's|packages/||')

          for WS in $WORKSPACES; do
            PKG_PATH="packages/$WS"
            PKG_NAME=$(jq -r .name "$PKG_PATH/package.json")
            VERSION=$(jq -r .version "$PKG_PATH/package.json")

            echo "Checking $PKG_NAME@$VERSION..."
            TAG_EXISTS=$(npm view "$PKG_NAME@$VERSION" version 2>/dev/null || echo "")

            if [ -z "$TAG_EXISTS" ]; then
              echo "::group::Publishing $PKG_NAME@$VERSION"
              npm publish --workspace "$PKG_NAME" --access=public --registry=https://npm.pkg.github.com
              echo "::endgroup::"
              CHANGED=1
            else
              echo "Skipping $PKG_NAME@$VERSION (already published)"
            fi
          done

          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_USERCONFIG: ${{ github.workspace }}/.npmrc

      # Step 8: Create Git Tag (only if packages were published)
      - name: Create Git Tag
        if: steps.publish.outputs.changed == '1'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          TAG_NAME="packages-$(date +'%Y%m%d%H%M%S')" # e.g., packages-20250710123000
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use GitHub's default token

